pub fn  perform_standing_ovation(input:Vec<usize>) -> usize{

    let mut standing = 0;
    let mut friends = 0;   

    for shyness in 0..input.len() {
       if standing < shyness {
          let new_friends  = shyness - standing;
          friends += new_friends;
          standing += new_friends;
       }
       standing += input[shyness];
    }

    friends
}

#[cfg(test)]
mod tests {
    use super::perform_standing_ovation;

    #[test]
    fn acceptance_test() {
        assert_eq!(2, perform_standing_ovation(vec![8,0,0,1,0,0,0,0,0,5,0,7,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,2,1,0,0,0,4,0,0,0,6,0,0,0,0,0,4,0,0,0,9,0,0,0,0,0,9,0,6,0,0,0,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,9,0,0,0,0,5,0,2,0,0,1,2,0,0,0,0,0,7,0,0,9,1,0,0,0,0,0,5,3,0,3,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0,6,1,0,0,0,0,0,1,3,0,0,0,0,0,8,0,0,2,0,0,7,0,0,3,0,2,0,7,0,0,0,0,0,0,0,0,0,8,0,0,6,0,0,0,5,0,0,4,0,8,0,0,9,0,0,0,0,3,0,0,1,1,0,0,1,0,7,0,9,0,3,0,0,2,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,4,0,0,0,6,0,0,2,0,0,7,8,0,5,0,0,0,0,0,0,0,0,0,2,0,4,0,0,0,0,0,0,0,0,0,5,0,3,0,6,0,2,0,0,0,0,0,3,0,0,0,0,0,0,2,0,0,5,0,0,0,0,9,0,0,0,0,0,0,0,3,0,0,0,0,5,0,5,0,0,0,0,0,0,0,0,5,8,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,1,0,0,0,0,1,0,5,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,9,0,0,0,0,0,0,0,6,0,5,0,4,0,0,0,0,0,0,0,0,7,0,0,3,0,0,2,0,2,0,6,0,0,0,4,0,0,0,2,2,0,0,0,0,0,3,0,0,0,0,0,0,4,0,4,0,2,0,0,0,0,0,0,0,0,0,0,0,7,0,4,0,0,0,0,0,4,5,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,5,5,0,8,0,0,7,0,0,0,0,0,0,0,0,0,0,9,0,0,0,3,0,6,0,0,0,0,9,0,0,0,8,0,0,0,0,0,0,3,8,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,4,0,2,0,4,0,0,2,0,4,0,0,0,0,5,0,4,0,0,0,3,0,0,3,0,0,5,0,0,0,0,0,9,0,0,3,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,8,0,0,5,3,0,0,0,6,0,4,4,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,6,0,0,0,0,1,5,0,0,2,0,0,0,0,5,0,0,0,0,2,0,4,0,3,0,7,0,8,0,8,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,6,0,0,6,0,0,0,0,0,8,9,0,0,0,3,0,0,0,0,0,4,0,0,0,0,0,0,0,9,0,8,0,0,3,5,0,0,9,7,0,0,0,0,0,0,0,0,0,0,2,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,9,0,0,0,0,0,3,0,0,0,0,0,0,0,0,2,0,0,4,5,0,0,0,0,0,0,5,4,0,0,0,0,0,0,0,2,0,3,9,0,0,4,0,0,0,0,6,9,8,0,0,3,9,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,9,0,3,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,9,0,2,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,0,5,0,0,0,1]))
    }
    
    #[test]
    fn an_audience_with_one_fan_will_be_a_standing_ovation() {
        assert_eq!(0, perform_standing_ovation(vec![1]))
    }

    #[test]
    fn one_friend_is_needed_for_a_one_shy_person() {
        assert_eq!(1, perform_standing_ovation(vec![0,1]))
    }

    #[test]
    fn one_friend_is_needed_for_two_shy_persons() {
        assert_eq!(1, perform_standing_ovation(vec![0,1,1]))
    }
        
}